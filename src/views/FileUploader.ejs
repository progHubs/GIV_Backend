<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>File Uploader Test</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body { font-family: Arial, sans-serif; margin: 2rem; background: #f9f9f9; }
    .container { max-width: 600px; margin: auto; background: #fff; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 8px #0001; }
    h1 { text-align: center; }
    .preview { margin-top: 2rem; }
    .preview img, .preview video, .preview audio, .preview iframe { max-width: 100%; margin-top: 1rem; border-radius: 4px; }
    .link { margin-top: 1rem; word-break: break-all; }
    .error { color: #b00; margin-top: 1rem; }
    label { display: block; margin-top: 1rem; }
    select, input[type=file], button { margin-top: 0.5rem; }
    .success { color: #080; }
  </style>
</head>
<body>
  <div class="container">
    <h1>File Uploader Test</h1>
    <form id="uploadForm">
      <label for="fileType">File Type:</label>
      <select id="fileType" name="fileType" required>
        <option value="image">Image</option>
        <option value="images">Multiple Images</option>
        <option value="video">Video</option>
        <option value="document">Document</option>
        <option value="pdf">PDF</option>
        <option value="mixed">Mixed (Images, Documents, Videos)</option>
      </select>
      <label for="fileInput">Select File(s):</label>
      <input type="file" id="fileInput" name="file" required multiple>
      <button type="submit">Upload</button>
    </form>
    <div class="preview" id="preview"></div>
    <div class="error" id="error"></div>
  </div>
  <script>
    const endpoints = {
      image:   { url: '/api/v1/upload/image', field: 'image', multiple: false },
      images:  { url: '/api/v1/upload/images', field: 'images', multiple: true },
      video:   { url: '/api/v1/upload/video', field: 'video', multiple: false },
      document:{ url: '/api/v1/upload/document', field: 'document', multiple: false },
      pdf:     { url: '/api/v1/upload/pdf', field: 'pdf', multiple: false },
      mixed:   { url: '/api/v1/upload/mixed', field: null, multiple: true },
    };

    const form = document.getElementById('uploadForm');
    const fileTypeSelect = document.getElementById('fileType');
    const fileInput = document.getElementById('fileInput');
    const preview = document.getElementById('preview');
    const errorDiv = document.getElementById('error');

    fileTypeSelect.addEventListener('change', () => {
      const type = fileTypeSelect.value;
      fileInput.multiple = endpoints[type].multiple;
      fileInput.value = '';
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      preview.innerHTML = '';
      errorDiv.textContent = '';
      const type = fileTypeSelect.value;
      const endpoint = endpoints[type];
      const files = fileInput.files;
      if (!files.length) {
        errorDiv.textContent = 'Please select a file.';
        return;
      }
      const formData = new FormData();
      if (type === 'mixed') {
        // For mixed, assign files to their fields by mimetype
        for (const file of files) {
          if (file.type.startsWith('image/')) {
            formData.append('images', file);
          } else if (file.type.startsWith('video/')) {
            formData.append('videos', file);
          } else {
            formData.append('documents', file);
          }
        }
      } else if (endpoint.multiple) {
        for (const file of files) {
          formData.append(endpoint.field, file);
        }
      } else {
        formData.append(endpoint.field, files[0]);
      }
      try {
        const res = await fetch(endpoint.url, {
          method: 'POST',
          body: formData
        });
        const data = await res.json();
        if (!data.success) {
          errorDiv.textContent = data.error || 'Upload failed.';
          return;
        }
        preview.innerHTML = '<div class="success">Upload successful!</div>';
        // Handle different response structures
        if (type === 'images') {
          data.data.files.forEach(showFilePreview);
        } else if (type === 'mixed') {
          // Show all types
          ['images','videos','documents'].forEach(group => {
            if (data.data[group]) {
              data.data[group].forEach(showFilePreview);
            }
          });
        } else if (data.data.files) {
          data.data.files.forEach(showFilePreview);
        } else if (data.data) {
          showFilePreview(data.data);
        }
      } catch (err) {
        errorDiv.textContent = 'Error: ' + err.message;
      }
    });

    function showFilePreview(file) {
      if (!file || !file.url) return;
      const div = document.createElement('div');
      div.className = 'file-preview';
      // Show file type
      div.innerHTML = `<strong>Type:</strong> ${file.mimetype || ''}<br>`;
      // Show link
      div.innerHTML += `<div class="link"><strong>Cloudinary Link:</strong> <a href="${file.url}" target="_blank">${file.url}</a></div>`;
      // Preview by type
      if (file.mimetype && file.mimetype.startsWith('image/')) {
        div.innerHTML += `<img src="${file.url}" alt="Image preview">`;
      } else if (file.mimetype && file.mimetype.startsWith('video/')) {
        div.innerHTML += `<video src="${file.url}" controls style="max-width:100%;height:auto;"></video>`;
      } else if (file.mimetype && file.mimetype.startsWith('audio/')) {
        div.innerHTML += `<audio src="${file.url}" controls></audio>`;
      } else if (file.mimetype === 'application/pdf') {
        div.innerHTML += `<iframe src="${file.url}" width="100%" height="400"></iframe>`;
      } else {
        div.innerHTML += `<div><a href="${file.url}" target="_blank">Download/View File</a></div>`;
      }
      preview.appendChild(div);
    }
  </script>
</body>
</html>
