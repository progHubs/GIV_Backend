<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GIV Society - Authentication</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <style>
      body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      }
      .auth-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
      }
      .auth-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        width: 100%;
        max-width: 900px;
      }
      .auth-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        text-align: center;
      }
      .auth-body {
        padding: 40px;
      }
      .form-section {
        display: none;
      }
      .form-section.active {
        display: block;
      }
      .nav-tabs {
        border: none;
        margin-bottom: 30px;
      }
      .nav-tabs .nav-link {
        border: none;
        color: #6c757d;
        font-weight: 500;
        padding: 15px 25px;
        border-radius: 10px;
        margin-right: 10px;
      }
      .nav-tabs .nav-link.active {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
      }
      .form-control,
      .form-select {
        border-radius: 10px;
        border: 2px solid #e9ecef;
        padding: 12px 15px;
        transition: all 0.3s ease;
      }
      .form-control:focus,
      .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
      }
      .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 10px;
        padding: 12px 30px;
        font-weight: 600;
        transition: all 0.3s ease;
      }
      .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
      }
      .alert {
        border-radius: 10px;
        border: none;
      }
      .user-info {
        background: #f8f9fa;
        border-radius: 15px;
        padding: 25px;
        margin-top: 20px;
      }
      .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 2rem;
        margin: 0 auto 20px;
      }
      .spinner-border {
        width: 1.2rem;
        height: 1.2rem;
      }
      .password-strength {
        margin-top: 10px;
      }
      .strength-bar {
        height: 4px;
        border-radius: 2px;
        transition: all 0.3s ease;
      }
      .strength-weak {
        background: #dc3545;
      }
      .strength-medium {
        background: #ffc107;
      }
      .strength-strong {
        background: #28a745;
      }
      .debug-panel {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 10px;
        padding: 15px;
        margin-top: 15px;
        font-family: monospace;
        font-size: 0.9em;
        display: none;
      }
      .role-badge {
        display: inline-block;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
      }
      .role-admin {
        background: #dc3545;
        color: white;
      }
      .role-user {
        background: #007bff;
        color: white;
      }
      .role-volunteer {
        background: #28a745;
        color: white;
      }
      .role-donor {
        background: #ffc107;
        color: black;
      }
      .role-editor {
        background: #6f42c1;
        color: white;
      }
    </style>
  </head>
  <body>
    <div class="auth-container">
      <div class="auth-card">
        <div class="auth-header">
          <h1><i class="fas fa-heart"></i> GIV Society</h1>
          <p class="mb-0">
            Empowering Communities Through Volunteering & Donations
          </p>
        </div>

        <div class="auth-body">
          <!-- Navigation Tabs -->
          <ul class="nav nav-tabs" id="authTabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button
                class="nav-link active"
                id="login-tab"
                data-bs-toggle="tab"
                data-bs-target="#login"
                type="button"
                role="tab"
              >
                <i class="fas fa-sign-in-alt"></i> Login
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button
                class="nav-link"
                id="register-tab"
                data-bs-toggle="tab"
                data-bs-target="#register"
                type="button"
                role="tab"
              >
                <i class="fas fa-user-plus"></i> Register
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button
                class="nav-link"
                id="profile-tab"
                data-bs-toggle="tab"
                data-bs-target="#profile"
                type="button"
                role="tab"
                style="display: none"
              >
                <i class="fas fa-user"></i> Profile
              </button>
            </li>
          </ul>

          <!-- Tab Content -->
          <div class="tab-content" id="authTabContent">
            <!-- Login Form -->
            <div class="tab-pane fade show active" id="login" role="tabpanel">
              <h3 class="mb-4">Welcome Back</h3>
              <form id="loginForm">
                <div class="mb-3">
                  <label for="loginEmail" class="form-label"
                    >Email Address</label
                  >
                  <input
                    type="email"
                    class="form-control"
                    id="loginEmail"
                    name="email"
                    required
                  />
                </div>
                <div class="mb-3">
                  <label for="loginPassword" class="form-label">Password</label>
                  <input
                    type="password"
                    class="form-control"
                    id="loginPassword"
                    name="password"
                    required
                  />
                </div>
                <button type="submit" class="btn btn-primary w-100">
                  <span class="btn-text">Login</span>
                  <span
                    class="spinner-border spinner-border-sm d-none"
                    role="status"
                  ></span>
                </button>
              </form>
              <div
                id="loginAlert"
                class="alert mt-3"
                style="display: none"
              ></div>
              <div id="loginDebug" class="debug-panel"></div>
            </div>

            <!-- Registration Form -->
            <div class="tab-pane fade" id="register" role="tabpanel">
              <h3 class="mb-4">Join GIV Society</h3>
              <form id="registerForm">
                <div class="row">
                  <div class="col-md-6 mb-3">
                    <label for="registerName" class="form-label"
                      >Full Name</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="registerName"
                      name="full_name"
                      required
                    />
                  </div>
                  <div class="col-md-6 mb-3">
                    <label for="registerEmail" class="form-label"
                      >Email Address</label
                    >
                    <input
                      type="email"
                      class="form-control"
                      id="registerEmail"
                      name="email"
                      required
                    />
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-6 mb-3">
                    <label for="registerPhone" class="form-label"
                      >Phone Number (Optional)</label
                    >
                    <input
                      type="tel"
                      class="form-control"
                      id="registerPhone"
                      name="phone"
                      placeholder="+251911234567"
                    />
                  </div>
                  <div class="col-md-6 mb-3">
                    <label for="registerRole" class="form-label">Role</label>
                    <select class="form-select" id="registerRole" name="role">
                      <option value="user">User</option>
                      <option value="volunteer">Volunteer</option>
                      <option value="donor">Donor</option>
                      <option value="editor">Editor</option>
                      <option value="admin">Admin</option>
                    </select>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-6 mb-3">
                    <label for="registerPassword" class="form-label"
                      >Password</label
                    >
                    <input
                      type="password"
                      class="form-control"
                      id="registerPassword"
                      name="password"
                      required
                    />
                    <div class="password-strength">
                      <div class="strength-bar" id="passwordStrength"></div>
                    </div>
                  </div>
                  <div class="col-md-6 mb-3">
                    <label for="registerLanguage" class="form-label"
                      >Language Preference</label
                    >
                    <select
                      class="form-select"
                      id="registerLanguage"
                      name="language_preference"
                    >
                      <option value="en">English</option>
                      <option value="am">Amharic</option>
                    </select>
                  </div>
                </div>
                <button type="submit" class="btn btn-primary w-100">
                  <span class="btn-text">Create Account</span>
                  <span
                    class="spinner-border spinner-border-sm d-none"
                    role="status"
                  ></span>
                </button>
              </form>
              <div
                id="registerAlert"
                class="alert mt-3"
                style="display: none"
              ></div>
              <div id="registerDebug" class="debug-panel"></div>
            </div>

            <!-- User Profile -->
            <div class="tab-pane fade" id="profile" role="tabpanel">
              <div id="userProfile">
                <div class="text-center mb-4">
                  <div class="user-avatar" id="userAvatar">
                    <i class="fas fa-user"></i>
                  </div>
                  <h3 id="userName">Loading...</h3>
                  <span class="role-badge" id="userRole">Loading...</span>
                </div>

                <div class="user-info">
                  <div class="row">
                    <div class="col-md-6">
                      <h5>
                        <i class="fas fa-envelope"></i> Contact Information
                      </h5>
                      <p>
                        <strong>Email:</strong>
                        <span id="userEmail">Loading...</span>
                      </p>
                      <p>
                        <strong>Phone:</strong>
                        <span id="userPhone">Loading...</span>
                      </p>
                      <p>
                        <strong>Language:</strong>
                        <span id="userLanguage">Loading...</span>
                      </p>
                    </div>
                    <div class="col-md-6">
                      <h5>
                        <i class="fas fa-info-circle"></i> Account Details
                      </h5>
                      <p>
                        <strong>Member Since:</strong>
                        <span id="userCreated">Loading...</span>
                      </p>
                      <p>
                        <strong>Email Verified:</strong>
                        <span id="userVerified">Loading...</span>
                      </p>
                      <p>
                        <strong>Last Updated:</strong>
                        <span id="userUpdated">Loading...</span>
                      </p>
                    </div>
                  </div>

                  <div id="volunteerProfile" style="display: none">
                    <hr />
                    <h5>
                      <i class="fas fa-hands-helping"></i> Volunteer Profile
                    </h5>
                    <div class="row">
                      <div class="col-md-6">
                        <p>
                          <strong>Area of Expertise:</strong>
                          <span id="volunteerExpertise">Loading...</span>
                        </p>
                        <p>
                          <strong>Location:</strong>
                          <span id="volunteerLocation">Loading...</span>
                        </p>
                      </div>
                      <div class="col-md-6">
                        <p>
                          <strong>Total Hours:</strong>
                          <span id="volunteerHours">Loading...</span>
                        </p>
                        <p>
                          <strong>Background Check:</strong>
                          <span id="volunteerBackground">Loading...</span>
                        </p>
                      </div>
                    </div>
                  </div>

                  <div id="donorProfile" style="display: none">
                    <hr />
                    <h5><i class="fas fa-gift"></i> Donor Profile</h5>
                    <div class="row">
                      <div class="col-md-6">
                        <p>
                          <strong>Total Donated:</strong>
                          <span id="donorTotal">Loading...</span>
                        </p>
                        <p>
                          <strong>Donation Frequency:</strong>
                          <span id="donorFrequency">Loading...</span>
                        </p>
                      </div>
                      <div class="col-md-6">
                        <p>
                          <strong>Donation Tier:</strong>
                          <span id="donorTier">Loading...</span>
                        </p>
                        <p>
                          <strong>Recurring Donor:</strong>
                          <span id="donorRecurring">Loading...</span>
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="text-center mt-4">
                  <div class="row">
                    <div class="col-md-4">
                      <a
                        href="/test/faq"
                        class="btn btn-outline-primary w-100 mb-2"
                      >
                        <i class="fas fa-question-circle"></i> FAQ Testing
                      </a>
                    </div>
                    <div class="col-md-4">
                      <a
                        href="/test/post"
                        class="btn btn-outline-success w-100 mb-2"
                      >
                        <i class="fas fa-file-alt"></i> Post Testing
                      </a>
                    </div>
                    <div class="col-md-4">
                      <button
                        class="btn btn-outline-danger w-100 mb-2"
                        onclick="logout()"
                      >
                        <i class="fas fa-sign-out-alt"></i> Logout
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              <div
                id="profileAlert"
                class="alert mt-3"
                style="display: none"
              ></div>
              <div id="profileDebug" class="debug-panel"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Global state
      let currentUser = null;
      let isAuthenticated = false;

      // API Base URL
      const API_BASE = "/api/v1";

      // Debug mode toggle
      let debugMode = false;
      const debugToggle = document.createElement("button");
      debugToggle.className = "btn btn-outline-secondary btn-sm position-fixed";
      debugToggle.style.cssText = "top: 20px; right: 20px; z-index: 1000;";
      debugToggle.textContent = "Debug: OFF";
      debugToggle.onclick = function () {
        debugMode = !debugMode;
        this.textContent = `Debug: ${debugMode ? "ON" : "OFF"}`;
        this.className = debugMode
          ? "btn btn-warning btn-sm position-fixed"
          : "btn btn-outline-secondary btn-sm position-fixed";
      };
      document.body.appendChild(debugToggle);

      // Helper functions
      function showAlert(elementId, message, type = "danger") {
        const alert = document.getElementById(elementId);
        alert.className = `alert alert-${type}`;
        alert.innerHTML = message;
        alert.style.display = "block";
        setTimeout(() => (alert.style.display = "none"), 5000);
      }

      function showDebug(elementId, data) {
        if (!debugMode) return;
        const debug = document.getElementById(elementId);
        debug.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
        debug.style.display = "block";
      }

      function setLoading(button, loading) {
        const btnText = button.querySelector(".btn-text");
        const spinner = button.querySelector(".spinner-border");

        if (loading) {
          btnText.style.display = "none";
          spinner.classList.remove("d-none");
          button.disabled = true;
        } else {
          btnText.style.display = "inline";
          spinner.classList.add("d-none");
          button.disabled = false;
        }
      }

      function switchTab(tabId) {
        // Update active tab
        document.querySelectorAll(".nav-link").forEach((link) => {
          link.classList.remove("active");
        });
        document
          .querySelector(`[data-bs-target="#${tabId}"]`)
          .classList.add("active");

        // Update active content
        document.querySelectorAll(".tab-pane").forEach((pane) => {
          pane.classList.remove("show", "active");
        });
        document.getElementById(tabId).classList.add("show", "active");
      }

      function updatePasswordStrength(password) {
        const strengthBar = document.getElementById("passwordStrength");
        let strength = 0;
        let className = "strength-weak";
        let width = "0%";

        if (password.length >= 8) strength++;
        if (/[a-z]/.test(password)) strength++;
        if (/[A-Z]/.test(password)) strength++;
        if (/[0-9]/.test(password)) strength++;
        if (/[^A-Za-z0-9]/.test(password)) strength++;

        if (strength >= 4) {
          className = "strength-strong";
          width = "100%";
        } else if (strength >= 2) {
          className = "strength-medium";
          width = "50%";
        } else {
          width = "25%";
        }

        strengthBar.className = `strength-bar ${className}`;
        strengthBar.style.width = width;
      }

      function displayUserProfile(user) {
        currentUser = user;
        isAuthenticated = true;

        // Update avatar with user initials
        const avatar = document.getElementById("userAvatar");
        const initials = user.full_name
          .split(" ")
          .map((n) => n[0])
          .join("")
          .toUpperCase();
        avatar.innerHTML = initials;

        // Update basic info
        document.getElementById("userName").textContent = user.full_name;
        document.getElementById("userEmail").textContent = user.email;
        document.getElementById("userPhone").textContent =
          user.phone || "Not provided";
        document.getElementById("userLanguage").textContent =
          user.language_preference === "en" ? "English" : "Amharic";
        document.getElementById("userCreated").textContent = new Date(
          user.created_at
        ).toLocaleDateString();
        document.getElementById("userVerified").textContent =
          user.email_verified ? "Yes" : "No";
        document.getElementById("userUpdated").textContent = new Date(
          user.updated_at
        ).toLocaleDateString();

        // Update role badge
        const roleBadge = document.getElementById("userRole");
        roleBadge.textContent =
          user.role.charAt(0).toUpperCase() + user.role.slice(1);
        roleBadge.className = `role-badge role-${user.role}`;

        // Show volunteer profile if exists
        if (user.volunteer_profile) {
          document.getElementById("volunteerProfile").style.display = "block";
          document.getElementById("volunteerExpertise").textContent =
            user.volunteer_profile.area_of_expertise || "Not specified";
          document.getElementById("volunteerLocation").textContent =
            user.volunteer_profile.location || "Not specified";
          document.getElementById("volunteerHours").textContent =
            user.volunteer_profile.total_hours || "0";
          document.getElementById("volunteerBackground").textContent =
            user.volunteer_profile.background_check_status || "Pending";
        }

        // Show donor profile if exists
        if (user.donor_profile) {
          document.getElementById("donorProfile").style.display = "block";
          document.getElementById("donorTotal").textContent =
            `$${user.donor_profile.total_donated || "0.00"}`;
          document.getElementById("donorFrequency").textContent =
            user.donor_profile.donation_frequency || "Not specified";
          document.getElementById("donorTier").textContent =
            user.donor_profile.donation_tier || "Not specified";
          document.getElementById("donorRecurring").textContent = user
            .donor_profile.is_recurring_donor
            ? "Yes"
            : "No";
        }

        // Show profile tab
        document.getElementById("profile-tab").style.display = "inline-block";
        switchTab("profile");
      }

      // Login form handler
      document
        .getElementById("loginForm")
        .addEventListener("submit", async function (e) {
          e.preventDefault();
          const form = e.target;
          const button = form.querySelector('button[type="submit"]');

          setLoading(button, true);

          const formData = new FormData(form);
          const data = Object.fromEntries(formData);

          try {
            const response = await fetch(`${API_BASE}/auth/login`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              credentials: "include", // Include cookies for authentication
              body: JSON.stringify(data),
            });

            const result = await response.json();
            showDebug("loginDebug", {
              request: data,
              response: result,
              status: response.status,
            });

            if (result.success) {
              showAlert(
                "loginAlert",
                `Welcome back, ${result.user.full_name}!`,
                "success"
              );
              displayUserProfile(result.user);
            } else {
              showAlert("loginAlert", result.errors.join(", "), "danger");
            }
          } catch (error) {
            showAlert(
              "loginAlert",
              "Login failed. Please try again.",
              "danger"
            );
            showDebug("loginDebug", { error: error.message });
          } finally {
            setLoading(button, false);
          }
        });

      // Registration form handler
      document
        .getElementById("registerForm")
        .addEventListener("submit", async function (e) {
          e.preventDefault();
          const form = e.target;
          const button = form.querySelector('button[type="submit"]');

          setLoading(button, true);

          const formData = new FormData(form);
          const data = Object.fromEntries(formData);

          try {
            const response = await fetch(`${API_BASE}/auth/register`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              credentials: "include", // Include cookies for authentication
              body: JSON.stringify(data),
            });

            const result = await response.json();
            showDebug("registerDebug", {
              request: data,
              response: result,
              status: response.status,
            });

            if (result.success) {
              showAlert("registerAlert", result.message, "success");
              if (result.user) {
                displayUserProfile(result.user);
              } else {
                // Switch to login tab if email verification is required
                switchTab("login");
              }
            } else {
              showAlert("registerAlert", result.errors.join(", "), "danger");
            }
          } catch (error) {
            showAlert(
              "registerAlert",
              "Registration failed. Please try again.",
              "danger"
            );
            showDebug("registerDebug", { error: error.message });
          } finally {
            setLoading(button, false);
          }
        });

      // Password strength checker
      document
        .getElementById("registerPassword")
        .addEventListener("input", function (e) {
          updatePasswordStrength(e.target.value);
        });

      // Logout function
      async function logout() {
        try {
          const response = await fetch(`${API_BASE}/auth/logout`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            credentials: "include", // Include cookies for authentication
          });

          const result = await response.json();

          if (result.success) {
            currentUser = null;
            isAuthenticated = false;

            // Hide profile tab
            document.getElementById("profile-tab").style.display = "none";

            // Switch to login tab
            switchTab("login");

            // Clear forms
            document.getElementById("loginForm").reset();
            document.getElementById("registerForm").reset();

            showAlert("loginAlert", "Logged out successfully", "success");
          } else {
            showAlert("loginAlert", "Logout failed", "danger");
          }
        } catch (error) {
          showAlert("loginAlert", "Logout failed. Please try again.", "danger");
        }
      }

      // Check if user is already authenticated on page load
      async function checkAuthStatus() {
        try {
          console.log("Checking authentication status...");
          const response = await fetch(`${API_BASE}/auth/me`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
            credentials: "include", // Include cookies for authentication
          });

          console.log("Auth response status:", response.status);
          const result = await response.json();
          console.log("Auth response:", result);

          if (result.success) {
            console.log("User is authenticated, displaying profile");
            displayUserProfile(result.user);
          } else {
            console.log("Not authenticated - staying on current page");
            // Don't redirect, just stay on login/register tab
          }
        } catch (error) {
          console.log("Auth check failed:", error);
          // Don't redirect, just stay on current page
        }
      }

      // Initialize
      document.addEventListener("DOMContentLoaded", function () {
        checkAuthStatus();
      });
    </script>
  </body>
</html>
