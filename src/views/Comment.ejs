<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Comment Test UI</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      .comment-box {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        background: #fafbfc;
      }
      .comment-actions button {
        margin-right: 0.5rem;
      }
      .comment-author {
        font-weight: 600;
        color: #2c3e50;
      }
      .comment-date {
        font-size: 0.9em;
        color: #888;
      }
      .comment-content {
        margin: 0.5rem 0;
      }
      .reply-box {
        margin-left: 2rem;
        background: #f4f7fa;
      }
      .response-box {
        margin-top: 1rem;
      }
      .deleted-comment {
        color: #aaa;
        font-style: italic;
      }
    </style>
  </head>
  <body class="container py-4">
    <h2>Post Comments Test</h2>
    <div class="mb-3">
      <label for="postIdInput" class="form-label">Get Post by ID</label>
      <div class="input-group">
        <input
          type="number"
          class="form-control"
          id="postIdInput"
          placeholder="Enter Post ID"
        />
        <button class="btn btn-primary" id="fetchPostBtn">
          Fetch Post & Comments
        </button>
      </div>
    </div>
    <div id="postInfo" class="mb-4"></div>
    <div id="commentsSection"></div>
    <div id="addCommentSection" style="display: none">
      <h5>Add a Comment</h5>
      <form id="addCommentForm">
        <div class="mb-2">
          <textarea
            class="form-control"
            name="content"
            id="newCommentContent"
            rows="2"
            placeholder="Write your comment..."
            required
          ></textarea>
        </div>
        <button type="submit" class="btn btn-success">Add Comment</button>
      </form>
    </div>
    <div class="response-box" id="commentResponse"></div>

    <!-- Modals for update/reply -->
    <div class="modal fade" id="editCommentModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Edit Comment</h5>
          </div>
          <div class="modal-body">
            <textarea
              class="form-control"
              id="editCommentContent"
              rows="3"
            ></textarea>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button
              type="button"
              class="btn btn-primary"
              id="saveEditCommentBtn"
            >
              Save
            </button>
          </div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="replyCommentModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Reply to Comment</h5>
          </div>
          <div class="modal-body">
            <textarea
              class="form-control"
              id="replyCommentContent"
              rows="3"
            ></textarea>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Cancel
            </button>
            <button
              type="button"
              class="btn btn-success"
              id="sendReplyCommentBtn"
            >
              Reply
            </button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      const API_BASE = "/api/v1";
      let currentPostId = null;
      let commentsData = [];
      let editingCommentId = null;
      let replyingToCommentId = null;

      document.getElementById("fetchPostBtn").onclick = async () => {
        const postId = document.getElementById("postIdInput").value;
        if (!postId) return;
        currentPostId = postId;
        document.getElementById("commentResponse").innerHTML = "";
        await fetchPostAndComments(postId);
      };

      async function fetchPostAndComments(postId) {
        // Fetch post
        const postRes = await fetch(`${API_BASE}/posts/id/${postId}`);
        const postData = await postRes.json();
        const postInfoDiv = document.getElementById("postInfo");
        if (!postData.success) {
          postInfoDiv.innerHTML = `<div class='alert alert-danger'>Post not found</div>`;
          document.getElementById("addCommentSection").style.display = "none";
          document.getElementById("commentsSection").innerHTML = "";
          return;
        }
        postInfoDiv.innerHTML = `<div class='card'><div class='card-body'><h4>${postData.data.title}</h4><div>${postData.data.content || ""}</div></div></div>`;
        document.getElementById("addCommentSection").style.display = "";
        // Fetch comments
        const commentsRes = await fetch(
          `${API_BASE}/comments/${postId}/comments`
        );
        const commentsJson = await commentsRes.json();
        commentsData = commentsJson.data || [];
        renderComments();
      }

      // Render threaded comments recursively (no inline event handlers)
      function renderCommentNode(comment, depth = 0) {
        const isDeleted =
          comment.deleted_at !== null && comment.deleted_at !== undefined;
        let html = `<div class="comment-box${depth > 0 ? " reply-box" : ""}">
          <div class="comment-author">User #${comment.user_id || "N/A"}</div>
          <div class="comment-date">${new Date(comment.created_at).toLocaleString()}</div>
          <div class="comment-content${isDeleted ? " deleted-comment" : ""}">${isDeleted ? "[Deleted]" : comment.content}</div>`;
        if (!isDeleted) {
          html += `<div class="comment-actions">
            <button class="btn btn-sm btn-outline-primary edit-btn" data-id="${comment.id}" data-content="${encodeURIComponent(comment.content)}">Edit</button>
            <button class="btn btn-sm btn-outline-danger delete-btn" data-id="${comment.id}">Delete</button>
            <button class="btn btn-sm btn-outline-success reply-btn" data-id="${comment.id}">Reply</button>
          </div>`;
        }
        if (comment.children && comment.children.length) {
          html += comment.children
            .map((child) => renderCommentNode(child, depth + 1))
            .join("");
        }
        html += "</div>";
        return html;
      }

      function renderComments() {
        const section = document.getElementById("commentsSection");
        if (!commentsData.length) {
          section.innerHTML = `<div class='text-muted'>No comments yet.</div>`;
          return;
        }
        section.innerHTML = commentsData
          .map((c) => renderCommentNode(c))
          .join("");
        attachCommentActionListeners();
      }

      // Attach event listeners to comment action buttons
      function attachCommentActionListeners() {
        document.querySelectorAll(".edit-btn").forEach((btn) => {
          btn.addEventListener("click", function () {
            editingCommentId = this.dataset.id;
            document.getElementById("editCommentContent").value =
              decodeURIComponent(this.dataset.content);
            new bootstrap.Modal(
              document.getElementById("editCommentModal")
            ).show();
          });
        });
        document.querySelectorAll(".delete-btn").forEach((btn) => {
          btn.addEventListener("click", function () {
            const id = this.dataset.id;
            if (!confirm("Delete this comment?")) return;
            fetch(`${API_BASE}/comments/comments/${id}`, { method: "DELETE" })
              .then((res) => res.json())
              .then((data) => {
                showResponse(data);
                if (data.success) fetchPostAndComments(currentPostId);
              });
          });
        });
        document.querySelectorAll(".reply-btn").forEach((btn) => {
          btn.addEventListener("click", function () {
            replyingToCommentId = this.dataset.id;
            document.getElementById("replyCommentContent").value = "";
            new bootstrap.Modal(
              document.getElementById("replyCommentModal")
            ).show();
          });
        });
      }

      // Add comment
      document.getElementById("addCommentForm").onsubmit = async (e) => {
        e.preventDefault();
        const content = document.getElementById("newCommentContent").value;
        if (!content) return;
        const res = await fetch(
          `${API_BASE}/comments/${currentPostId}/comments`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ content }),
          }
        );
        const data = await res.json();
        showResponse(data);
        if (data.success) {
          document.getElementById("newCommentContent").value = "";
          await fetchPostAndComments(currentPostId);
        }
      };

      // Edit comment modal
      document.getElementById("saveEditCommentBtn").onclick = async () => {
        const content = document.getElementById("editCommentContent").value;
        if (!content) return;
        const res = await fetch(
          `${API_BASE}/comments/comments/${editingCommentId}`,
          {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ content }),
          }
        );
        const data = await res.json();
        showResponse(data);
        bootstrap.Modal.getInstance(
          document.getElementById("editCommentModal")
        ).hide();
        if (data.success) await fetchPostAndComments(currentPostId);
      };

      // Reply modal
      document.getElementById("sendReplyCommentBtn").onclick = async () => {
        const content = document.getElementById("replyCommentContent").value;
        if (!content) return;
        const res = await fetch(
          `${API_BASE}/comments/${currentPostId}/comments/${replyingToCommentId}/reply`,
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ content }),
          }
        );
        const data = await res.json();
        showResponse(data);
        bootstrap.Modal.getInstance(
          document.getElementById("replyCommentModal")
        ).hide();
        if (data.success) await fetchPostAndComments(currentPostId);
      };

      function showResponse(data) {
        const box = document.getElementById("commentResponse");
        if (data.success) {
          box.innerHTML = `<div class='alert alert-success'>Success!</div>`;
        } else {
          box.innerHTML = `<div class='alert alert-danger'>${data.error || "Error"}</div>`;
        }
      }
    </script>
  </body>
</html>
